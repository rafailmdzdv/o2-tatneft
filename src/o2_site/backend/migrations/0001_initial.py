# Generated by Django 4.1.7 on 2023-04-01 23:59

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='GasStation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('issuer_number', models.IntegerField()),
                ('gs_number', models.IntegerField()),
                ('companion_service_objects', models.TextField(null=True)),
                ('additional_services', models.TextField(null=True)),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.region')),
            ],
        ),
        migrations.CreateModel(
            name='FuelPrices',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ai92_taneko', models.FloatField(null=True)),
                ('ai92', models.FloatField(null=True)),
                ('ai95_taneko', models.FloatField(null=True)),
                ('dt', models.FloatField(null=True)),
                ('dt_taneko', models.FloatField(null=True)),
                ('ai98_taneko', models.FloatField(null=True)),
                ('sug', models.FloatField(null=True)),
                ('ai98', models.FloatField(null=True)),
                ('electro', models.FloatField(null=True)),
                ('ai100', models.FloatField(null=True)),
                ('ad_blue', models.FloatField(null=True)),
                ('ai80', models.FloatField(null=True)),
                ('dt_winter', models.FloatField(null=True)),
                ('kpg', models.FloatField(null=True)),
                ('dt_arctica', models.FloatField(null=True)),
                ('gas_station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.gasstation')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=40, unique=True, verbose_name='Логин')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Почта')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]
